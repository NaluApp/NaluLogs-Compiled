// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Osize -module-name Networking
import Combine
import Foundation
import Swift
public struct APIErrorResponse : Swift.Error, Swift.Equatable {
  public let url: Swift.String
  public let statusCode: Swift.Int
  public let data: Foundation.Data?
  public let message: Swift.String
  public init(_ statusCode: Swift.Int, _ message: Swift.String, _ url: Swift.String, data: Foundation.Data? = nil)
  public static func == (lhs: Networking.APIErrorResponse, rhs: Networking.APIErrorResponse) -> Swift.Bool
}
extension APIErrorResponse {
  public static func network(_ url: Swift.String) -> Networking.APIErrorResponse
  public static func parseData(_ url: Swift.String) -> Networking.APIErrorResponse
  public static func unknown(_ url: Swift.String) -> Networking.APIErrorResponse
  public static func empty(_ url: Swift.String) -> Networking.APIErrorResponse
}
public enum Methods : Swift.String, Swift.Codable {
  case GET, POST, UPDATE, DELETE, PATCH
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public protocol APIRequest {
  associatedtype Response : Swift.Decodable, Swift.Encodable
  typealias APIRequestResponse = Swift.Result<Self.Response, Networking.APIErrorResponse>
  typealias APIRequestCompletion = (Self.APIRequestResponse) -> ()
  var method: Networking.Methods { get }
  var body: Any { get }
  var baseUrl: Swift.String { get }
  var path: Swift.String { get }
  var headers: [Swift.String : Swift.String] { get }
  var parameters: [Swift.String : Swift.String] { get }
}
extension APIRequest {
  public var baseUrl: Swift.String {
    get
  }
  public var parameters: [Swift.String : Swift.String] {
    get
  }
  public var headers: [Swift.String : Swift.String] {
    get
  }
  public var body: Any {
    get
  }
  public func getRequest() -> Foundation.URLRequest
  public func makeRequest() -> Combine.AnyPublisher<Self.Response, Networking.APIErrorResponse>
}
extension Networking.Methods : Swift.Equatable {}
extension Networking.Methods : Swift.Hashable {}
extension Networking.Methods : Swift.RawRepresentable {}
